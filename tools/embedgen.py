#
# DRNSF - An unofficial Crash Bandicoot level editor
# Copyright (C) 2017-2020  DRNSF contributors
#
# See the AUTHORS.md file for more details.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import os.path
import re
import sys

def process_file(out, f):
    out.write('    extern const unsigned char data[] = {\n')

    while True:
        buf = f.read(16)
        if not buf: break

        out.write(' ' * 8)

        for b in buf:
            out.write('0x%02x,' % b)

        out.write('\n')

    out.write('        0  // null terminator\n')
    out.write('    };\n')
    out.write('    extern const std::size_t size = sizeof(data) - 1;\n\n')

def process_dirname(out, dir_name):
    assert os.path.isdir(dir_name)
    for e in os.listdir(dir_name):
        if e.startswith('.') or e == '': continue

        fullname = os.path.join(dir_name, e)

        if not re.match(r'^[a-zA-Z]', e):
            print('Not-nice name (non-alphabetic first char): ', fullname)
            print('This file will not be included!')
            continue

        nicename = re.sub(r'[^a-zA-Z0-9_]', '_', e)

        if os.path.isdir(fullname):
            out.write('namespace %s {\n\n' % nicename)
            process_dirname(out, fullname)
            out.write('}\n\n')
        elif os.path.isfile(fullname):
            out.write('namespace %s {\n\n' % nicename)
            with open(fullname, 'rb') as f:
                process_file(out, f)
            out.write('}\n\n')
        else:
            print('Improper file detected (symlink or device file?):', fullname)
            print('This file will not be included!')

if len(sys.argv) != 3:
    print('Usage: embedgen.py <dir> <outfile.cc>')
    sys.exit(1)

with open(sys.argv[2], 'w') as out:
    out.write(
        '//\n'
        '// THIS FILE IS AUTOMATICALLY GENERATED\n'
        '//\n'
        '// DO NOT EDIT IT\n'
        '// (your changes will just be overwritten anyway)\n'
        '//\n'
        '\n'
        '#include <cstddef>\n'
        '\n'
        'namespace drnsf {\n'
        'namespace embed {\n'
        '\n'
    )
    process_dirname(out, sys.argv[1])
    out.write('}\n')
    out.write('}\n')
